🔸開発方針（考えたこと）

・⭐️定数はなるべく、各ViewModelファイル内で書きたいと思いました。
　⭐️値(Value)が重複してもいいので。
　　→そのViewの関心事ごとに、値(Value)が違っても用途や意味(Key)は異なる場合も多いため
　　→Gitでのコンフリクト回避の意味もあります

・色や画像などはアセットカタログで管理する

・文字列は定数から呼び出すのではなく、ベタ書きするのが

--------------------------------------------------

・View側で画面表示を分ける際、
　if(日本語なら) {
    nextPage(pageName: "title")
} else if(英語なら) {
    nextPage(pageName: "mePage")
}
のようにif文などは書かず、
    nextPage(pageName: viewModel.selectPage("title"))
のように書きたいです。
　→ViewとViewModelの役割分担を明確にするため。
  ⭐️Viewにif文やswitch文など、ビジネスロジックの温床になるコードを一切書かない
  ⭐️ViewModelにページ作成やUIパーツを作成するコードを一切書かない
  ⭐️Modelはオブジェクトのプロパティ(フィールド, メンバー(?))を変化させる処理を書く
    ※ビジネスロジックなど、オブジェクトの中身以外にも影響するならViewModel
→→⭐️どうしても書けないなら、まずは書かずにお互いに相談する取り決めにするのが良いかと思っています


※上記の例は実際には、タイトルボタンとマイページボタンに分かれるはず(ビジネスロジックないのでOK)
  Button(action: {
      nextPage(pageName: "title")
  })

  Button(action: {
      nextPage(pageName: "mePage")
  })


---------------------------------------------
11/30

各画面の命名はどうなるんだ？
　→既存コードから読み解ける？

ViewModelとModelの認識間違えてるかもしれない
　→ビジネスロジックはModelに持たせるべきなのかもß

シミュレータじゃないと動作確認できないものはコード上で目印となるコメントアウトをつけたい
